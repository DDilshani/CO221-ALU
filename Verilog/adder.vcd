$date
	Fri May 25 16:07:12 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module myFullAdder $end
$var wire 4 ! A [3:0] $end
$var wire 4 " B [3:0] $end
$var wire 1 # cIn $end
$var wire 1 $ w3 $end
$var wire 1 % w2 $end
$var wire 1 & w1 $end
$var wire 1 ' cOut $end
$var wire 4 ( S [3:0] $end
$scope module add1 $end
$var wire 1 ) A $end
$var wire 1 * B $end
$var wire 1 # cIn $end
$var wire 1 & cOut $end
$var wire 1 + z $end
$var wire 1 , y $end
$var wire 1 - x $end
$var wire 1 . S $end
$scope module add1 $end
$var wire 1 ) A $end
$var wire 1 * B $end
$var wire 1 , S $end
$var wire 1 - cOut $end
$upscope $end
$scope module add2 $end
$var wire 1 , A $end
$var wire 1 # B $end
$var wire 1 . S $end
$var wire 1 + cOut $end
$upscope $end
$upscope $end
$scope module add2 $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 & cIn $end
$var wire 1 % cOut $end
$var wire 1 1 z $end
$var wire 1 2 y $end
$var wire 1 3 x $end
$var wire 1 4 S $end
$scope module add1 $end
$var wire 1 / A $end
$var wire 1 0 B $end
$var wire 1 2 S $end
$var wire 1 3 cOut $end
$upscope $end
$scope module add2 $end
$var wire 1 2 A $end
$var wire 1 & B $end
$var wire 1 4 S $end
$var wire 1 1 cOut $end
$upscope $end
$upscope $end
$scope module add3 $end
$var wire 1 5 A $end
$var wire 1 6 B $end
$var wire 1 % cIn $end
$var wire 1 $ cOut $end
$var wire 1 7 z $end
$var wire 1 8 y $end
$var wire 1 9 x $end
$var wire 1 : S $end
$scope module add1 $end
$var wire 1 5 A $end
$var wire 1 6 B $end
$var wire 1 8 S $end
$var wire 1 9 cOut $end
$upscope $end
$scope module add2 $end
$var wire 1 8 A $end
$var wire 1 % B $end
$var wire 1 : S $end
$var wire 1 7 cOut $end
$upscope $end
$upscope $end
$scope module add4 $end
$var wire 1 ; A $end
$var wire 1 < B $end
$var wire 1 $ cIn $end
$var wire 1 ' cOut $end
$var wire 1 = z $end
$var wire 1 > y $end
$var wire 1 ? x $end
$var wire 1 @ S $end
$scope module add1 $end
$var wire 1 ; A $end
$var wire 1 < B $end
$var wire 1 > S $end
$var wire 1 ? cOut $end
$upscope $end
$scope module add2 $end
$var wire 1 > A $end
$var wire 1 $ B $end
$var wire 1 @ S $end
$var wire 1 = cOut $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
1@
0?
1>
0=
0<
1;
1:
09
18
07
06
15
04
03
02
01
00
0/
1.
0-
1,
0+
1*
0)
b1101 (
0'
0&
0%
0$
0#
b1 "
b1100 !
$end
#2
14
1&
0.
0:
b10 (
0@
1-
0,
08
0>
1)
05
0;
b1 !
#4
0:
0%
0&
1.
01
b11 (
14
0-
1,
12
0)
1/
b10 !
#6
1:
1%
11
04
1&
b100 (
0.
1-
0,
1)
b11 !
#10
0@
0%
0$
0&
1.
01
04
07
b101 (
1:
0-
1,
02
18
0)
0/
15
b100 !
#12
14
1&
b110 (
0.
1-
0,
1)
b101 !
#14
0@
0$
07
1:
0%
0&
1.
01
b111 (
14
0-
1,
12
0)
1/
b110 !
#16
1@
1$
17
0:
1%
11
04
1&
b1000 (
0.
1-
0,
1)
b111 !
#18
0%
0$
0'
0&
1.
01
04
07
0:
0=
b1001 (
1@
0-
1,
02
08
1>
0)
0/
05
1;
b1000 !
#28
